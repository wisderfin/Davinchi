from telebot.async_telebot import AsyncTeleBot
import telebot
from app import redis_utils
from app.utils import get_user, get_users
from random import choice
from app.keyboard import assessment_keyboard


from random import choice


def search_handlers(bot: AsyncTeleBot):
    @bot.message_handler(func=lambda mes: mes.text == 'üëé' or mes.text == 'üîé –ü–æ–∏—Å–∫')
    async def callback_query(mes):
        status = redis_utils.get(key=f'{mes.from_user.id}')
        if status == 'mute':
            redis_utils.set(key=f'{mes.from_user.id}', value='talcking')
            status = 'talcking'

        user = await get_user(mes.from_user.id)
        search_gender = not user.gender if status != 'teammate' else None
        users = await get_users(location=user.location, age=user.age, gender=search_gender)

        if users:
            attempts = 0
            max_attempts = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            while attempts < max_attempts:
                rand_user = choice(users)
                other_status = redis_utils.get(key=f'{rand_user.id}')

                if rand_user.id != user.id and status == other_status:
                    if status == 'talcking':
                        rus_status = '–û–±—â–µ–Ω–∏–µ'
                    elif status == 'teammate':
                        rus_status = '–¢–∏–º–µ–π—Ç–∏–Ω–≥'
                    else:
                        rus_status = '–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å'
                    await bot.send_photo(
                        mes.from_user.id,
                        rand_user.photos,
                        f'–°—Ç–∞—Ç—É—Å: {rus_status}\n'
                        f'–ò–º—è: {rand_user.name}\n'
                        f'–í–æ–∑—Ä–∞—Å—Ç: {rand_user.age}\n'
                        f'–ü–æ–ª: {"–ú" if rand_user.gender else "–ñ"}\n'
                        f'–õ–æ–∫–∞—Ü–∏—è: {rand_user.location}\n'
                        f'–û —Å–µ–±–µ: {rand_user.description}',
                        reply_markup=assessment_keyboard()
                    )
                    redis_utils.set(key=f'last:{mes.from_user.id}', value=rand_user.id)
                    return

                attempts += 1

            await bot.send_message(mes.from_user.id, f'–ê–∫—Ç–∏–≤–Ω—ã—Ö –ª—é–¥–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {status} –Ω–µ –Ω–∞—à–ª–æ—Å—å, '
                                                     f'–ø–æ–ø—Ä–æ–±—É–π —Å–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏.')
        else:
            await bot.send_message(mes.from_user.id, f'–ê–∫—Ç–∏–≤–Ω—ã—Ö –ª—é–¥–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {status} –Ω–µ –Ω–∞—à–ª–æ—Å—å, '
                                                     f'–ø–æ–ø—Ä–æ–±—É–π —Å–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏.')

    @bot.message_handler(func=lambda mes: mes.text == 'üëç')
    async def callback_like(mes):
        liked_user = int(redis_utils.get(key=f'last:{mes.from_user.id}'))
        try:
            list_other_user = redis_utils.get_json(key=f'liked:{liked_user}')
        except Exception as _ex:
            list_other_user = []

        try:
            list_current_user = redis_utils.get_json(key=f'liked:{mes.from_user.id}')
        except Exception as _ex:
            list_current_user = []

        # –ï—Å–ª–∏ list_other_user –∏–ª–∏ list_current_user —Ä–∞–≤–Ω—ã None, –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∏–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        if list_other_user is None:
            list_other_user = []

        if list_current_user is None:
            list_current_user = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ª–∞–π–∫–Ω—É—Ç–æ–≥–æ –ª–∞–π–∫–∏ (–Ω–µ —Å–≤–æ–∏)
        if not list_other_user:
            redis_utils.set_json(key=f'liked:{liked_user}', value=[mes.from_user.id])

        # –ï—Å–ª–∏ –ª–∞–π–∫–Ω—É–≤—à–∏–π –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –ª–∞–π–∫–Ω—É—Ç—ã—Ö - –¥–æ–±–∞–≤–ª—è–µ–º
        elif mes.from_user.id not in list_other_user:
            list_other_user.append(mes.from_user.id)
            redis_utils.set_json(key=f'liked:{liked_user}', value=list_other_user)

        # –ï—Å–ª–∏ –ª–∞–π–∫–Ω—É–≤—à–∏–π –≤ —Å–ø–∏—Å–∫–µ —É –ª–∞–π–∫–Ω—É—Ç–æ–≥–æ
        if liked_user in list_current_user:
            other_user = await get_user(int(liked_user))
            await bot.send_message(mes.from_user.id, f'–£ –≤–∞—Å –º—ç—Ç—á! –í–æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç: @{other_user.account}')
            await bot.send_message(other_user.id, f'–í–∞—Å —Ç–æ–ª—å–∫–æ —á—Ç–æ –ª–∞–π–∫–Ω—É–ª –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —ç—Ç–æ –≤–∑–∞–∏–º–Ω–æ! '
                                                  f'–í–æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç: @{mes.from_user.username}')
        else:
            await bot.send_message(mes.from_user.id, f'–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –º—ç—Ç—á–∞')

        await callback_query(mes)

